    5  !  MAX 13781 BYTES
   10 ON WARNING NEXT  :: CALL CLEAR  :: CALL SCREEN ( 4 ) 
   20 DISPLAY AT ( 1 , 8 )  : "PIT-PYRAMIDE"  : TAB ( 8 )  ; RPT$ ( "=" , 12 ) 
   30 DISPLAY AT ( 4 , 1 )  : "(C) 1984 BY LARO SCHATZER"  :  : "MITWIRKUNG: MARC PILLOUD" 
   40 DISPLAY AT ( 8 , 1 )  : "VERSUCHEN SIE SICH DURCH    DEN URWALD ZU SCHLAGEN UND  IN DIE GEHEIMNISUMWITTERTE  PIT-PYRAMIDE EINZUDRINGEN." 
   50 DISPLAY AT ( 13 , 1 )  : "ERREICHEN SIE DEN GOLDSCHATZ"  :  : "UND WERDEN SIE REICH !!"  :  : "NUR DEN WEG ZUR PIT-PYRAMIDEMUESSEN SIE SELBER FINDEN!" 
   60 DISPLAY AT ( 20 , 1 )  : "   VIEL GLUECK!!!" 
   70 DISPLAY AT ( 22 , 4 )  : "ANZAHL SPIELER(1/2):1" 
   80 ACCEPT AT ( 22 , 24 ) BEEP SIZE ( - 1 ) VALIDATE ( "12" )  : SPIELER 
   90 DISPLAY AT ( 22 , 11 )  : "LEBEN:1" 
  100 ACCEPT AT ( 22 , 17 ) SIZE ( - 2 ) BEEP VALIDATE ( DIGIT )  : LE1 
  110 DIM PU ( 2 ) , LE ( 2 )  :: PU ( 1 ) , PU ( 2 ) = 0  :: LE ( 1 ) , LE ( SPIELER ) = LE1 
  120 CALL CLEAR  :: CALL SCREEN ( 2 )  :: CALL MAGNIFY ( 4 )  :: RESTORE 1920
  130 RANDOMIZE  :: DEF IR ( X ) = INT ( ( 2.5 * X + 1 ) * RND - X ) 
  140 DEF GS = ( ( PU ( [ ) / 200 ) < 10 ) * PU ( [ ) / - 200 + ( PU ( [ ) / 200 > = 10 ) * - 10 
  150 D = 1  :: CALL COLOR ( 1 , 12 , 2 , 2 , 2 , 12 , 10 , 12 , 6 , 11 , 12 , 6 , 5 , 4 , 13 , 6 , 2 , 7 , 8 , 8 , 1 ) 
  160 READ Z , Z$  :: IF Z THEN CALL CHAR ( Z , Z$ )  :: GOTO 160
  170 [ = 1 
  180  ! 
  190 IF LE ( [ ) > = 1 THEN 210
  200 IF LE ( 1 ) < 1 AND LE ( 2 ) < 1 THEN CALL CLEAR  :: STOP ELSE 1600
  210 GOSUB 1630
  220 ON D GOTO 230, 640, 1050
  230 GOSUB 1860
  240 CALL SPRITE ( # 1 , 128 , 12 , 103 , 41 , # 8 , 96 , 16 , 66 , 10 , # 2 , 140 , 15 , 151 , 235 , 0 , - 9 + IR ( 2 ) - GS ) 
  250 CALL SPRITE ( # 7 , 76 , 2 , 86 , 100 , # 6 , 76 , 2 , 86 , 132 ) 
  260 CALL SPRITE ( # 5 , 132 , 16 , 16 , 1 , 0 , 10 , # 3 , 128 , 12 , 103 , 186 , # 4 , 80 , 2 , 58 , 255 , 0 , - 11 + IR ( 2 ) - GS ) 
  270 GOSUB 1790
  280 CALL COINC ( # 8 , 66 , 41 , 5 , O )  :: CALL COINC ( # 8 , 66 , 186 , 5 , O1 )  :: IF NOT O THEN 300
  290 FA = 41  :: FA1 = 66  :: FA2 = 144  :: GOSUB 1710 :: GOTO 380
  300 IF NOT O1 THEN 320
  310 FA = 186  :: FA1 = 66  :: FA2 = 144  :: GOSUB 1710 :: GOTO 370
  320 IF K = 18 THEN CO = 5  :: GOSUB 480
  330 GOSUB 1800
  340 CALL COINC ( # 8 , 66 , 116 , 32 , O )  :: CALL COINC ( # 8 , # 4 , 10 , O1 )  :: IF O OR O1 THEN 540
  350 CALL COINC ( # 8 , 66 , 5 , 8 , O )  :: IF O THEN IF X = - 4 THEN X = 0 
  360 CALL MOTION ( # 8 , 0 , 2 * X )  :: GOTO 270
  370 WW = 17  :: SS = 4  :: WII = 3  :: GOSUB 1780 :: WEG = 1 
  380 GOSUB 1790
  390 GOSUB 1800
  400 CALL COINC ( # 8 , # 2 , 14 , O )  :: IF O THEN 540
  410 CALL COINC ( # 8 , 144 , 41 , 3 , O )  :: IF O AND Y = 4 THEN FA = 41  :: FI = 144  :: FI2 = 66  :: GOSUB 1740 :: GOTO 270
  420 FI = 28  :: FI2 = - 4  :: IF WEG THEN FI = 204  :: FI2 = 4 ELSE 440
  430 CALL COINC ( # 8 , 144 , 5 , 6 , O )  :: IF O THEN 630
  440 CALL COINC ( # 8 , 144 , FI , 8 , O )  :: IF NOT O THEN 460
  450 IF X = FI2 THEN X = 0  :: CALL SOUND ( - 200 , 150 , 5 ) 
  460 CALL MOTION ( # 8 , 0 , X * 2 )  :: GOTO 380
  470 CALL PATTERN ( # 8 , 100 )  :: CALL COINC ( # 8 , 66 , 108 , 16 , O )  :: IF NOT O THEN 510
  480 CALL PATTERN ( # 8 , 100 )  :: CALL COINC ( # 8 , 66 , 75 , 20 , O )  :: CALL MOTION ( # 8 , - 8 , - X * ( X < > - 4 ) )  :: IF NOT O THEN 510
  490 FOR Z = 1 TO 16  :: CALL COINC ( # CO , # 8 , 40 , O )  :: IF O THEN 600
  500 NEXT Z  :: GOTO 520
  510 FOR Z = 1 TO 150  :: NEXT Z 
  520 CALL MOTION ( # 8 , 8 , - 1.5 * X * ( X < > - 4 ) )  :: FOR Z = 1 TO 145  :: NEXT Z 
  530 X = 0  :: CALL MOTION ( # 8 , 0 , 0 )  :: CALL POSITION ( # 8 , P , Q )  :: CALL LOCATE ( # 8 , 66 , Q )  :: PAT = - 1  :: RETURN 
  540 CALL MOTION ( # 2 , 0 , 0 , # 8 , 0 , 0 , # 5 , 0 , 0 , # 4 , 0 , 0 , # 3 , 0 , 0 )  :: CALL PATTERN ( # 7 , 68 , # 6 , 68 , # 7 , 76 , # 6 , 78 ) 
  550 CALL SOUND ( 1250 , - 7 , 10 , 110 , 5 ) 
  560 CALL COLOR ( # 8 , 10 ) 
  570 CALL DELSPRITE ( ALL )  :: CALL CLEAR 
  580 LE ( [ ) = LE ( [ ) - 1 
  590 GOTO 1600
  600 CALL PATTERN ( # 8 , 44 )  :: CALL POSITION ( # 5 , P , Q )  :: CALL LOCATE ( # 8 , P + 29 , Q - 13 )  :: CALL MOTION ( # 8 , 0 , 10 ) 
  610 X = 0  :: FOR Z = 1 TO 7  :: GOSUB 1800
  620 FOR Z1 = 1 TO 50  :: NEXT Z1  :: NEXT Z  :: X = 4  :: CALL PATTERN ( # 8 , 100 )  :: GOTO 520
  630 F , Z , P , Q , WEG , FA , FI , FI2 , X , Y , O , O1 , PAT , K , CO = 0  :: D = 2  :: CALL DELSPRITE ( ALL )  :: GOTO 210
  640 GOSUB 1850 :: CALL SPRITE ( # 8 , 96 , 16 , 144 , 200 , # 4 , 140 , 15 , 151 , 160 , 0 , - 9 + IR ( 3 ) - GS , # 1 , 128 , 12 , 103 , 41 , # 3 , 128 , 7 , 73 , 197 ) 
  650 SL = 0  :: CALL SPRITE ( # 2 , 80 , 2 , 58 , 255 , 0 , - 16 + IR ( 3 ) - GS , # 6 , 76 , 2 , 86 , 108 , # 5 , 132 , 16 , 8 , 1 , 0 , 10 ) 
  660 GOSUB 1790
  670 CALL COINC ( # 8 , 144 , 41 , 5 , O )  :: IF NOT O OR Y < > 4 THEN 690
  680 FA = 41  :: FI = 144  :: FI2 = 66  :: GOSUB 1740 :: GOTO 760
  690 CALL COINC ( # 8 , # 4 , 10 , O )  :: IF O THEN 540
  700 IF SL THEN 740
  710 CALL COINC ( # 8 , 144 , 20 , 5 , O )  :: IF NOT O THEN 740
  720 CALL SOUND ( 500 , 440 , 2 , 880 , 2 , 1760 , 2 )  :: SL = - 1 
  730 CALL VCHAR ( 17 , 4 , 32 , 2 ) 
  740 GOSUB 1800
  750 CALL MOTION ( # 8 , 0 , 2 * X )  :: GOTO 660
  760 CALL HCHAR ( 15 , 6 , 72 , 4 )  :: CALL HCHAR ( 16 , 6 , 72 , 4 ) 
  770 CALL DELSPRITE ( # 1 )  :: CALL HCHAR ( 12 , 6 , 42 , 4 )  :: CALL HCHAR ( 13 , 6 , 42 , 4 )  :: CALL HCHAR ( 14 , 6 , 42 , 4 )  :: WW = 17  :: SS = 7  :: WII = 6  :: GOSUB 1780
  780 GOSUB 1790
  790 CALL COINC ( # 8 , # 6 , 20 , O1 ) 
  800 CALL COINC ( # 8 , # 2 , 10 , O )  :: IF O OR O1 THEN 540
  810 CALL COINC ( # 8 , 66 , 5 , 8 , O )  :: IF O AND X = - 4 THEN X = 0 
  820 GOSUB 1800
  830 IF K = 18 THEN GOSUB 850
  840 CALL MOTION ( # 8 , 0 , X * 2 )  :: GOTO 780
  850 CALL PATTERN ( # 8 , 100 )  :: CALL MOTION ( # 8 , 0 , 0 )  :: CALL COINC ( # 8 , 66 , 70 , 20 , O )  :: CALL MOTION ( # 8 , - 8 , - 1.5 * X * ( X < > - 4 ) )  :: FOR Z = 1 TO 100  :: NEXT Z  :: IF O THEN 870
  860 FOR Z = 1 TO 45  :: NEXT Z  :: GOTO 890
  870 FOR Z = 1 TO 4  :: CALL COINC ( # 5 , # 8 , 35 , O )  :: IF O THEN 900
  880 NEXT Z 
  890 CALL MOTION ( # 8 , 8 , - 1.5 * X * ( X < > - 4 ) )  :: X = 0  :: FOR Z = 1 TO 150  :: NEXT Z  :: CALL MOTION ( # 8 , 0 , 0 )  :: CALL POSITION ( # 8 , P , Q )  :: CALL LOCATE ( # 8 , 66 , Q )  :: PAT = 0  :: RETURN 
  900 CALL PATTERN ( # 8 , 44 )  :: CALL POSITION ( # 5 , P , Q )  :: CALL LOCATE ( # 8 , P + 29 , Q - 13 )  :: CALL MOTION ( # 8 , 0 , 10 ) 
  910 X = 0  :: GOSUB 1800
  920 CALL COINC ( # 8 , 37 , 192 , 4 , O )  :: CALL COINC ( # 8 , 37 , 192 , 4 , O1 )  :: IF NOT O AND NOT O1 THEN 910
  930 X = 0  :: CALL MOTION ( # 8 , 0 , 0 )  :: CALL PATTERN ( # 8 , 100 )  :: CALL LOCATE ( # 8 , 34 , 190 ) 
  940 FOR Z = 1 TO 200  :: NEXT Z 
  950 GOSUB 1790
  960 CALL COINC ( # 8 , 34 , 174 , 3 , O )  :: IF O AND X = - 4 THEN X = 0 
  970 CALL MOTION ( # 8 , 0 , X ) 
  980 CALL COINC ( # 8 , 34 , 198 , 3 , O )  :: IF O THEN CALL MOTION ( # 8 , 0 , 0 )  :: CALL LOCATE ( # 8 , 34 , 198 )  :: GOTO 1000
  990 CALL COINC ( # 8 , # 5 , 26 , O )  :: IF O THEN 1030ELSE 950
 1000 CALL MOTION ( # 8 , 4 , 0 ) 
 1010 CALL COINC ( # 8 , 70 , 198 , 4 , O )  :: IF NOT O THEN 1010
 1020 CALL MOTION ( # 8 , 0 , 0 )  :: CALL DELSPRITE ( # 8 , ALL )  :: D = 3  :: GOTO 210
 1030 CALL MOTION ( # 8 , 0 , 0 , # 5 , 4 , 4 ) 
 1040 CALL COINC ( # 8 , # 5 , 8 , O )  :: IF NOT O THEN 1040ELSE 540
 1050 GOSUB 1850 :: CALL SPRITE ( # 8 , 100 , 16 , 236 , 113 , 16 , 0 , # 1 , 128 , 7 , 9 , 113 , # 15 , 124 , 12 , 145 , 196 ) 
 1060 CALL COINC ( # 8 , 49 , 113 , 3 , O )  :: IF NOT O THEN 1060
 1070 CALL MOTION ( # 8 , 0 , 0 )  :: CALL LOCATE ( # 8 , 49 , 113 )  :: WW = 5  :: SS = 16  :: WII = 6  :: GOSUB 1780
 1080 CALL SPRITE ( # 3 , 120 , 10 , 52 , 256 , # 4 , 140 , 15 , 103 , 150 , 0 , - 5 - 10 * RND - GS , # 2 , 120 , 14 , 144 , 150 , 0 , - GS * 2 ) 
 1090 GOSUB 1790 :: GOSUB 1800
 1100 CALL COINC ( # 8 , # 3 , 16 , O )  :: IF O THEN 540
 1110 CALL COINC ( # 8 , 49 , 41 , 5 , O )  :: IF O THEN 1170
 1120 CALL COINC ( # 8 , 49 , 185 , 5 , O )  :: IF O THEN 1320
 1130 IF K < > 18 OR F > 5 THEN 1150
 1140 CALL COLOR ( # 3 , 12 )  :: CALL MOTION ( # 3 , 0 , 0 )  :: F = F + 1  :: GOTO 1160
 1150 CALL COLOR ( # 3 , 10 )  :: CALL MOTION ( # 3 , 0 , 21 * RND - 10 ) 
 1160 CALL MOTION ( # 8 , 0 , 2 * X )  :: GOTO 1090
 1170 CALL PATTERN ( # 8 , 96 )  :: CALL MOTION ( # 8 , 0 , 0 )  :: CALL LOCATE ( # 8 , 49 , 41 )  :: CALL MOTION ( # 8 , 16 , 0 ) 
 1180 CALL COINC ( # 8 , 97 , 41 , 2 , O )  :: IF NOT O THEN 1180
 1190 CALL MOTION ( # 8 , 0 , 0 )  :: CALL LOCATE ( # 8 , 97 , 41 )  :: CALL PATTERN ( # 8 , 100 )  :: WW = 10  :: SS = 7  :: WII = 7  :: GOSUB 1780
 1200 CALL VCHAR ( 12 , 16 , 74 , 2 )  :: CALL VCHAR ( 12 , 17 , 74 , 2 )  :: WD = 100 
 1210 GOSUB 1790 :: GOSUB 1800
 1220 CALL COINC ( # 8 , 97 , 89 , 6 , O )  :: IF NOT O THEN 1240
 1230 FA1 = 97  :: FA2 = 145  :: FA = 89  :: GOSUB 1710 :: GOTO 1360
 1240 CALL COINC ( # 8 , 97 , 24 , 5 , O )  :: IF O AND X = - 4 THEN X = 0 
 1250 CALL COINC ( # 8 , # 4 , 16 , O )  :: IF O THEN 540
 1260 CALL COINC ( # 8 , 97 , WD , 5 , O )  :: IF O AND X = 4 THEN X = 0 
 1270 IF WD = 100 THEN 1310
 1280 CALL COINC ( # 8 , 97 , 185 , 5 , O ) 
 1290 IF NOT O OR Y < > 4 THEN 1310
 1300 FI = 97  :: FA = 185  :: FI2 = 49  :: GOSUB 1740 :: GOTO 1090
 1310 CALL MOTION ( # 8 , 0 , 2 * X )  :: GOTO 1210
 1320 CALL PATTERN ( # 8 , 96 )  :: CALL MOTION ( # 8 , 0 , 0 )  :: CALL LOCATE ( # 8 , 49 , 185 )  :: CALL MOTION ( # 8 , 16 , 0 ) 
 1330 CALL COINC ( # 8 , 97 , 185 , 2 , O )  :: IF NOT O THEN 1330
 1340 CALL PATTERN ( # 8 , 100 )  :: CALL MOTION ( # 8 , 0 , 0 )  :: CALL LOCATE ( # 8 , 97 , 185 ) 
 1350 WW = 12  :: SS = 16  :: WII = 2  :: WD = 202  :: GOSUB 1780 :: GOTO 1210
 1360 WW = 17  :: SS = 13  :: WII = 6  :: GOSUB 1780
 1370 GOSUB 1790 :: GOSUB 1800
 1380 CALL COINC ( # 8 , 145 , 35 , 5 , O )  :: IF O AND X = - 4 THEN X = 0 
 1390 CALL COINC ( # 8 , 145 , 200 , 5 , O )  :: IF O THEN 1450
 1400 IF SL THEN 1430
 1410 CALL COINC ( # 8 , # 2 , 14 , O )  :: IF O THEN 540
 1420 GOTO 1440
 1430 CALL DELSPRITE ( # 2 ) 
 1440 CALL MOTION ( # 8 , 0 , X * 2 )  :: GOTO 1370
 1450 CALL MOTION ( # 8 , 0 , 0 ) 
 1460 CALL PATTERN ( # 8 , 100 ) 
 1470 CALL SOUND ( 400 , 262 , 10 , 523 , 10 , 1047 , 10 ) 
 1480 CALL SOUND ( 400 , 330 , 8 , 659 , 8 , 1319 , 8 ) 
 1490 CALL SOUND ( 400 , 392 , 6 , 784 , 6 , 1568 , 6 ) 
 1500 CALL SOUND ( 1000 , 523 , 5 , 1047 , 5 , 2094 , 5 ) 
 1510 FOR X = 1 TO 20 
 1520 CALL COLOR ( # 8 , 16 , # 3 , 16 , # 4 , 16 ) 
 1530 CALL COLOR ( # 8 , 14 , # 3 , 14 , # 4 , 14 ) 
 1540 NEXT X 
 1550 CALL POSITION ( # 8 , P , Q ) 
 1560 CALL DELSPRITE ( ALL ) 
 1570 CALL SPRITE ( # 8 , 100 , 16 , P , Q , 0 , 2 ) 
 1580 FOR Z = 1 TO 800  :: NEXT Z  :: CALL DELSPRITE ( # 8 ) 
 1590 D = 1  :: PU ( [ ) = PU ( [ ) + 200  :: GOTO 210
 1600 [ = [ + 1  :: IF [ > SPIELER THEN [ = 1 
 1610 D = 1  :: GOTO 180
 1620 STOP 
 1630 ON D GOTO 1640, 1650, 1660
 1640 RESTORE 2050 :: GOTO 1670
 1650 RESTORE 2100 :: GOTO 1670
 1660 RESTORE 2150
 1670 CALL CLEAR 
 1680 IF D < 3 THEN CALL COLOR ( 3 , 2 , 13 , 4 , 2 , 13 ) ELSE CALL COLOR ( 3 , 2 , 4 , 4 , 2 , 4 ) 
 1690 READ A$ , B$ , C$ , D$ , Z$  :: DISPLAY AT ( 1 , 1 )  : A$  ; B$  ; C$  ; D$  ; Z$ 
 1700 A$ , B$ , C$ , D$ , Z$ = ""  :: RETURN 
 1710 CALL PATTERN ( # 8 , 96 )  :: CALL MOTION ( # 8 , 16 , 0 )  :: CALL LOCATE ( # 8 , FA1 , FA ) 
 1720 CALL COINC ( # 8 , FA2 , FA , 6 , O )  :: IF NOT O THEN 1720
 1730 CALL MOTION ( # 8 , 0 , 0 )  :: CALL POSITION ( # 8 , P , Q )  :: CALL LOCATE ( # 8 , FA2 , Q )  :: RETURN 
 1740 CALL MOTION ( # 8 , 0 , 0 )  :: CALL PATTERN ( # 8 , 100 )  :: CALL LOCATE ( # 8 , FI , FA ) 
 1750 GOSUB 1790 :: CALL MOTION ( # 8 , Y * 1.5 * ( Y < > - 4 ) , 0 ) 
 1760 CALL COINC ( # 8 , FI2 , FA , 5 , O )  :: IF NOT O THEN 1750
 1770 CALL MOTION ( # 8 , 0 , 0 )  :: CALL LOCATE ( # 8 , FI2 , FA )  :: CALL MOTION ( # 8 , 0 , - 16 )  :: FOR Z = 1 TO 50  :: NEXT Z  :: CALL MOTION ( # 8 , 0 , 0 )  :: RETURN 
 1780 CALL VCHAR ( WW , SS , 32 , WII )  :: CALL VCHAR ( WW , SS + 1 , 32 , WII )  :: GOSUB 1840 :: RETURN 
 1790 CALL JOYST ( [ , X , Y )  :: CALL KEY ( [ , K , S )  :: RETURN 
 1800 PAT = NOT PAT  :: IF X = 0 THEN 1820
 1810 CALL PATTERN ( # 8 , 100 + 4 * PAT ) 
 1820 CALL PATTERN ( # 7 , 76 + 8 * PAT , # 6 , 68 - 8 * PAT , # 5 , 132 - 4 * PAT ) 
 1830 RETURN 
 1840 CALL SOUND ( - 200 , - 5 , 5 )  :: RETURN 
 1850 PU ( [ ) = PU ( [ ) + 10 
 1860 DISPLAY AT ( 2 , 2 )  : "1:"  ; STR$ ( PU ( 1 ) )  ; 
 1870 DISPLAY AT ( 3 , 4 )  : STR$ ( LE ( 1 ) )  ; 
 1880 IF SPIELER = 1 THEN 1910
 1890 DISPLAY AT ( 2 , 21 )  : "2:"  ; STR$ ( PU ( 2 ) )  ; 
 1900 DISPLAY AT ( 3 , 23 )  : STR$ ( LE ( 2 ) )  ; 
 1910 RETURN 
 1920 DATA 33 , FFFFC0C0C0C0C0C0FFFF , 35 , FFFF030303030303FCF8F0F0E0C08080FFFFFFFFFFFEFEFCFFFFFFFF , 39 , FFFFFFFFFF7F7F3FC0E0F0F0F8FCFEFE 
 1930 DATA 42 , , 44 , 030707030307070707070301 , 46 , 28A8A83870E08090B8FCCE8603 
 1940 DATA 104 , , 105 , FCF0C00000C0F0FCFFFFFFFFFFFFF000FFFFFFFFF , 108 , FFFFFFFF0F , 109 , FFFFFFFFFFFF0F003F0F030000030F3F000FFFFFFFFFFFFF 
 1950 DATA 112 , 0000000FFFFFFFFF000000F0FFFFFFFF00F0FFFFFFFFFFFF , 115 , FFFFFFFF , 116 , 00000000FFFFFFFF 
 1960 DATA 64 , , 65 , 0080C0C0E0F0FCFE00010303070F3F7FFFFFFFFFFFFFFFFF , 68 , 0406030100000A1F0 , 70 , 000000A0F038BCFC0 , 88 , 1C221C0808081818 
 1970 DATA 72 , , 73 , 55AA55AA55AA55AA , 74 , FF010101FF080808 , 76 , 000000000F150A1F0 , 78 , 00000020F078BCFC0 , 80 , 0 , 83 , 000000000040FF40 , 82 , 0 , 81 , 0 
 1980 DATA 96 , 0103030103030303030303030303030380C0C080C0C0C0C0C0C0C0C0C0C0C0C , 100 , 0103030103070F1B1B030303060C0C0E80C0C080C0E0F0D8CCC0C0C060303038 
 1990 DATA 128 , FFFFFFFFFFFFFFFFFFFFFFFFFF000000FFFFFFFFFFFFFFFFFFFFFFFFFF 
 2000 DATA 132 , 90CCEFFF7F7F3F1FFF3F1F14142828140000008080C0C0DCF7FC 
 2010 DATA 120 , 00000003070F1F1F1F1F0F0703000000000000C0E0F0F8F8F8F8F0E0C 
 2020 DATA 124 , 0101010102050E193660554275527FFFC0C0C0C0E090D894EA9EE68AE2CEFEFF 
 2030 DATA 140 , 00000000001E0B0103011E060D000000007CC6C3630307FEFCFCA8A85 
 2040 DATA 136 , 000000000000001FFF1F1F3F7F3E281400000000000000DCF7FC808 , 0 , 0 
 2050 DATA @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@A@@@@@BA@@@@@BA@@@@@BA@@@@@@CA@@@BCCA@@@BCCA@@@BCCA@@@@@ 
 2060 DATA CCCICCCCCA@BCCCCCICCCCCA@@@BCCCICCCCCCICCCCCCICCCCCCCICCCCCICCCCCCICCCCCCICCCCCCCICCCCCICCCCCCICCCCCCICCCCCCCICCCCCICCCCCCICCCCCCICCCCCCCICC 
 2070 DATA CCCICCCCCCICCCCCCICCCCCCCICC***%&&'*****jkslm****%&&'******$  (***ihhhhhhhn**$  (***************rqtpo***********HHHH!#HHHHHHHHHHHHHHHH  HHHH 
 2080 DATA HHHH!#HHHHHHHHHHHHHHHH  HHHH JJ !#                    JJ JJ !#                    JJ JJ !#                    JJ    !# 
 2090 DATA "    !#                          !#                      HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH" 
 2100 DATA @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@A@@@@@BCCCA@@@BCCCA@@@@@BCCCCA@@@BCCCCCA@BCCCCCA@@@BCCCC 
 2110 DATA CCA@BCCCCCCCICCCCCCCA@BCCCCCCCCICCCCCCCCICCCCCCCCICCCCCCCCCICCCCCCCCICCCCCCCCICCCCCCCCCICCCCCCCCICCCCCCCCHH   HHCCCICCCCCCCCICCCCCCCHHHHHHHH 
 2120 DATA CCCICCCCCCCCICCCCCCHHHHHHHHH***%&&'****jklm***HHHHHHHHHH***$  (***ihhhhn*HHHHHHHHHHH***********rqpo*************HHHH!#HHHHHHHHHHHHHHHHHHHHHH 
 2130 DATA "HHHH!#HHHHHHHHHHHHHHHHHHHHHH H  !#          JJJJJJJJJJJJ X  !#          JJJJJJJJJJJJ    !#          JJJJJJJJJJJJ    !#          JJJJJJJJJJJJ" 
 2140 DATA "    !#          JJJJJJJJJJJJ    !#          JJJJJJJJJJJJHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH" 
 2150 DATA CCCCCCCCCCHH    HHCCCCCCCCCCCCCCCCCCCHHHHHHHHHHCCCCCCCCCCCCCCCCCHHHHHHHHHHHHCCCCCCCC*******HHHHHHHHHHHHHH*******HHHHHHHHHHHH !# HHHHHHHHHHHH 
 2160 DATA JJ           !#           JJJJ           !#           JJ             !#                          !#                          !# 
 2170 DATA HHHH!#HHHHHHHHHHHHHHHH!#HHHHJJ  !#       JJ       !#  JJJJ  !#       JJ       !#  JJ    !#                !#        !#                !# 
 2180 DATA "    !#                !#    HHHHHHHHHH!#HHHHHHHHHHHHHHHHJJ        !#                JJ        !#                          !#            J" 
 2190 DATA "          !#           HHH            !#          ttttt HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH" 
