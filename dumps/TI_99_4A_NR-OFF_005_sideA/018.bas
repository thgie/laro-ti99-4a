  410 CALL CLEAR  :: CALL SCREEN ( 5 ) 
  415 CALL COLOR ( 0 , 16 , 1 , 1 , 16 , 1 , 2 , 16 , 1 , 3 , 16 , 1 , 4 , 16 , 1 , 5 , 16 , 1 , 6 , 16 , 1 , 7 , 16 , 1 , 8 , 16 , 1 ) 
  420 CALL COLOR ( 10 , 16 , 1 , 12 , 16 , 5 , 13 , 16 , 9 )  :: CALL CHAR ( 64 , "3C4299A1A199423C" , 120 , "00410022001500080004008800500020" , 104 , "000000FF" ) 
  430 CALL CHAR ( 128 , "FF8083838383BFBFFF01C1C1C1C1FDFDBF8383838380FFFDFDC1C1C1C101FF" ) 
  435 DISPLAY AT ( 1 , 11 )  : "19"  :: CALL HCHAR ( 1 , 16 , 128 )  :: CALL HCHAR ( 1 , 17 , 129 )  :: CALL HCHAR ( 2 , 16 , 130 )  :: CALL HCHAR ( 2 , 17 , 131 )  :: DISPLAY AT ( 1 , 17 )  : "83" 
  440 DISPLAY AT ( 5 , 6 )  : "@ TI HOME COMPUTER"  :: CALL HCHAR ( 6 , 8 , 104 , 18 )  :: DISPLAY AT ( 7 , 2 )  : "BENUTZER-CLUB SCHWEIZ (TIC)"  :: CALL HCHAR ( 8 , 4 , 104 , 27 ) 
  445 DISPLAY AT ( 10 , 9 )  : "PRAESENTIERT:"  :: DISPLAY AT ( 14 , 6 )  : "H E L I K O P T E R"  :  : TAB ( 12 )  ; "ANGRIFF"  :  : TAB ( 4 )  ; "(EIN SPIEL FUER KOENNER)" 
  455 CALL HCHAR ( 12 , 3 , 42 , 29 )  :: CALL VCHAR ( 13 , 31 , 42 , 7 )  :: CALL HCHAR ( 20 , 3 , 42 , 29 )  :: CALL VCHAR ( 13 , 3 , 42 , 7 ) 
  460 CALL HCHAR ( 24 , 3 , 120 )  :: CALL HCHAR ( 24 , 4 , 121 )  :: DISPLAY AT ( 24 , 6 )  : "** MOMENT BITTE **" 
  465 CALL SOUND ( 250 , 880 , 5 , 587 , 9 , 370 , 9 )  :: CALL SOUND ( 250 , 880 , 5 , 587 , 9 , 370 , 9 )  :: CALL SOUND ( 250 , 988 , 5 , 587 , 9 , 392 , 9 ) 
  470 CALL SOUND ( 250 , 880 , 5 , 587 , 9 , 370 , 9 )  :: CALL SOUND ( 250 , 740 , 5 , 494 , 9 , 440 , 9 )  :: CALL SOUND ( 250 , 587 , 5 , 370 , 9 , 294 , 9 ) 
  475 CALL SOUND ( 250 , 740 , 5 , 587 , 9 , 440 , 9 )  :: CALL SOUND ( 250 , 880 , 5 , 587 , 5 , 370 , 9 )  :: CALL SOUND ( 250 , 988 , 5 , 587 , 9 , 392 , 9 ) 
  480 CALL SOUND ( 250 , 880 , 5 , 587 , 9 , 370 , 9 )  :: CALL SOUND ( 750 , 740 , 5 , 587 , 9 , 440 , 9 )  :: CALL SOUND ( 750 , 880 , 5 , 587 , 9 , 440 , 9 ) 
  485 CALL SOUND ( 700 , 988 , 5 , 622 , 9 , 500 , 9 )  :: CALL SOUND ( 400 , 784 , 5 , 622 , 9 , 494 , 9 )  :: CALL SOUND ( 220 , 740 , 5 , 622 , 9 , 440 , 9 ) 
  490 CALL SOUND ( 350 , 784 , 5 , 622 , 9 , 494 , 9 )  :: CALL SOUND ( 1000 , 659 , 5 , 392 , 9 , 330 , 9 )  :: FOR VERZ = 1 TO 600  :: NEXT VERZ  :: CALL CHARSET  :: CALL CLEAR 
  510 ON BREAK NEXT 
  515 ON WARNING NEXT 
  520 ON ERROR 1425
  525 CALL CLEAR  :: GOTO 1440
  530  ! CHARAKTER DEFINITIONEN
  535 DISPLAY AT ( 12 , 5 )  : "EIN MOMENT BITTE !" 
  540 CALL CHAR ( 88 , "187EFF7E3F7E3800" ) 
  545 CALL CHAR ( 96 , "F0103879F97F107E" ) 
  550 CALL CHAR ( 97 , "0F103879F97F107E" ) 
  555 CALL CHAR ( 98 , "387CFE44107C1028" ) 
  560 CALL CHAR ( 99 , "00000018183CFFFF" ) 
  565 CALL CHAR ( 100 , "0000001818" ) 
  570 CALL CHAR ( 101 , "0000493E08081422" ) 
  575 CALL CHAR ( 102 , "00222A3E08081412" ) 
  580 CALL CHAR ( 103 , "000080BCFAFF3040" ) 
  585 CALL CHAR ( 104 , "5500A408A401802A" ) 
  590 CALL CHAR ( 105 , "66814A804110C8A2" ) 
  595 CALL CHAR ( 106 , "01387CD306A491F1" ) 
  600 CALL CHAR ( 112 , "3C7EFEFE7C101038" ) 
  605 CALL CHAR ( 120 , "0000000010387CFF" ) 
  610 CALL CHAR ( 128 , "0103070F1F3F7FFF" )  :: CALL CHAR ( 129 , "FFFFFFFFFFFFFFFF" )  :: CALL CHAR ( 130 , "80C0E0F0F8FCFEFF" ) 
  615 CALL CHAR ( 136 , "30303FFFFF7E0C04" ) 
  620 CALL COLOR ( 12 , 16 , 6 )  :: CALL COLOR ( 2 , 6 , 6 )  :: CALL COLOR ( 13 , 14 , 6 )  :: CALL COLOR ( 14 , 7 , 1 )  :: CALL COLOR ( 11 , 13 , 1 ) 
  625 RETURN 
  635 CALL CLEAR 
  640 CALL SCREEN ( 12 ) 
  645 FOR I = 2 TO 8  :: CALL HCHAR ( 8 , I , 120 )  :: CALL HCHAR ( 9 , I , 129 )  :: NEXT I 
  650 FOR I = 2 TO 32 STEP 3  :: CALL HCHAR ( 8 , I , 120 )  :: CALL HCHAR ( 9 , I , 129 )  :: NEXT I 
  655 FOR I = 1 TO 31 STEP 3  :: CALL HCHAR ( 9 , I , 128 )  :: NEXT I 
  660 FOR I = 3 TO 30 STEP 3  :: CALL HCHAR ( 9 , I , 130 )  :: NEXT I 
  665 DEF TREE_ROW = INT ( RND * ( 14 - 10 + 1 ) ) + 10  :: DEF TREE_COL = INT ( RND * ( 30 - 1 + 1 ) ) + 1 
  670 FOR I = 1 TO 60  :: CALL VCHAR ( TREE_ROW , TREE_COL , 112 )  :: NEXT I 
  675 DISPLAY AT ( 24 , 5 )  : "HELIKOPTER ATTACKE" 
  680 CALL VCHAR ( 24 , 6 , 136 )  :: CALL VCHAR ( 24 , 25 , 136 ) 
  685 CALL SPRITE ( # 4 , 88 , 16 , 12 , 50 , 0 , 11 ) 
  690 CALL SPRITE ( # 5 , 88 , 16 , 20 , 150 , 0 , 10 ) 
  695 CALL SPRITE ( # 6 , 88 , 16 , 28 , 200 , 0 , - 11 ) 
  700 CALL SPRITE ( # 7 , 88 , 16 , 36 , 100 , 0 , 10 ) 
  705 CALL SPRITE ( # 8 , 88 , 16 , 44 , 75 , 0 , - 15 ) 
  710 CALL SPRITE ( # 9 , 88 , 16 , 28 , 75 , 0 , 12 ) 
  715 CALL SPRITE ( # 10 , 88 , 16 , 16 , 95 , 0 , - 5 ) 
  720 CALL SPRITE ( # 11 , 88 , 16 , 30 , 10 , 0 , 7 ) 
  725 CALL SPRITE ( # 2 , 99 , 2 , 170 , 100 ) 
  730 RETURN 
  740 RANDOMIZE 
  745 TIME = INT ( RND * 13 ) + 1  :: CALL BASE_MOVE ( TARGET$ )  :: IF TIME < > 4 AND TIME < > 13 AND TIME < > 1 THEN 745
  750 IF TIME = 1 THEN RETURN ELSE SPEED = INT ( RND * ( 9 ) ) + 1 
  755 HELI_COUNT = HELI_COUNT + 1  :: TARGET$ = "HELI"  :: NW_HELI$ = "NO" 
  760 IF HELI_COUNT = HOW_MANY + 1 THEN CALL MOTION ( # 2 , 0 , 0 )  :: DISPLAY AT ( 12 , 5 ) SIZE ( 10 )  : "GUT GEMACHT!" ELSE 770
  765 FOR C = 1 TO 800  :: NEXT C  :: GOSUB 1385
  770 DISPLAY AT ( 1 , 1 )  : "HELIKOPTER ANGRIFF.......!"  :: CALL MOTION ( # 2 , 0 , 0 ) 
  775 FOR I = 1 TO 12  :: CALL SOUND ( 50 , 700 , 0 )  :: CALL SOUND ( 25 , 3000 , 30 )  :: NEXT I 
  780 CALL HCHAR ( 1 , 1 , 42 , 31 ) 
  785 HR = INT ( RND * ( 57 - 7 + 1 ) ) + 7 
  790 CALL BASE_MOVE ( TARGET$ ) 
  795 IF ( HR > 33 AND HR < 44 ) OR ( HR > 16 AND HR < 26 ) OR ( HR > 55 AND HR < 58 ) THEN 785
  800 CALL SPRITE ( # 1 , 96 , 2 , HR , 250 , 0 , - ( 10 + SPEED ) ) 
  805 RETURN 
  815 CALL CLEAR 
  820 DISPLAY AT ( 12 , 5 )  : "TIPPE 'E'=> LEICHT"  : " "  : "    ODER 'H'=> SCHWER" 
  825 DISPLAY AT ( 20 , 5 )  : "ENTER EINGEBEN!" 
  830 ACCEPT AT ( 16 , 12 ) BEEP VALIDATE ( "EH" ) SIZE ( 1 )  : CHOISE$ 
  835 IF CHOISE$ = "E" THEN CALL MAGNIFY ( 2 ) ELSE CALL MAGNIFY ( 1 ) 
  840 FOR G = 170 TO 1700 STEP 100  :: CALL SOUND ( - 100 , G , 0 )  :: NEXT G 
  850 RETURN 
  860 CALL CLEAR 
  865 DISPLAY AT ( 6 , 5 )  : "SPIELSTAERKEN WAHL"  :: DISPLAY AT ( 7 , 5 )  : "------------------" 
  870 DISPLAY AT ( 10 , 5 )  : "1 = ASS" 
  875 DISPLAY AT ( 12 , 5 )  : "2 = AMATEUR" 
  880 DISPLAY AT ( 14 , 5 )  : "3 = ANFAENGER" 
  885 DISPLAY AT ( 20 , 5 )  : "SPIELSTAERKE?" 
  890 DISPLAY AT ( 24 , 5 )  : "ENTER EINGEBEN" 
  895 ACCEPT AT ( 20 , 19 ) BEEP VALIDATE ( DIGIT ) SIZE ( 1 )  : SKLVL 
  900 IF SKLVL > 3 ORSKLVL < 1 THEN 895
  905 RETURN 
  915 CALL VERSION ( EB ) 
  920 IF EB = 110 THEN KLOOP = 22  :: JLOOP = 20  :: ILOOP = 17 ELSE KLOOP = 19  :: JLOOP = 13  :: ILOOP = 10 
  925 RETURN 
  935 CALL CLEAR 
  940 DISPLAY AT ( 12 , 1 )  : " WIEVIELE HELIKOPTER KANNST"  : " "  : " DU SICHER ZERSTOEREN?" 
  945 DISPLAY AT ( 16 , 1 )  : " MINDESTENS =10 HOECHST =25" 
  950 DISPLAY AT ( 24 , 5 )  : "ENTER EINGEBEN!" 
  955 ACCEPT AT ( 18 , 13 ) BEEP SIZE ( 2 ) VALIDATE ( DIGIT )  : HOW_MANY 
  960 IF HOW_MANY < 10 OR HOW_MANY > 25 THEN 955
  965 IF SKLVL = 1 THEN SHOT_LIMIT = INT ( HOW_MANY * 3.3 ) 
  970 IF SKLVL = 2 THEN SHOT_LIMIT = INT ( HOW_MANY * 5.2 ) 
  975 IF SKLVL = 3 THEN SHOT_LIMIT = INT ( HOW_MANY * 7.1 ) 
  980 DISPLAY AT ( 20 , 2 )  : " DU HAST "  ; SHOT_LIMIT  ; "SCHUESSE!" 
  985 FOR C = 1 TO 500  :: NEXT C 
  990 RETURN 
 1000 CALL MOTION ( # 2 , 0 , 0 ) 
 1005 DISPLAY AT ( 16 , 3 )  : "ZERSTOERTE HELIS   => "  ; HELI_COUNT 
 1010 DISPLAY AT ( 17 , 3 )  : "FALLSCHIRMSPRINGER => "  ; HELI_COUT - MISS_COUNT 
 1015 DISPLAY AT ( 18 , 3 )  : "ANZAHL DER SCHUESSE=> "  ; SHOT_COUNT 
 1020 PCT = INT ( ( ( HELI_COUNT ) + ( HELI_COUNT - MISS_COUNT ) ) / SHOT_COUNT * 100 ) 
 1025 IF SHOT_COUNT = 0 THEN PCT = 0 
 1030 DISPLAY AT ( 19 , 3 )  : "TREFFERQUOTE IN %  => "  ; PCT 
 1035 FOR I = 1 TO 500  :: NEXT I 
 1040 CALL HCHAR ( 16 , 1 , 32 , 128 ) 
 1045 RETURN 
 1055 RANDOMIZE 
 1060 TARGET$ = "PLANE"  :: PR = INT ( RND * ( 57 - 7 ) + 1 ) + 7  :: CALL SPRITE ( # 1 , 103 , 15 , PR , 1 , 0 , 30 ) 
 1065 CALL BASE_MOVE ( TARGET$ ) 
 1070 FOR K = 1 TO KLOOP  :: CALL POSITION ( # 1 , SPR , SPC , # 2 , SBR , SBC )  :: IF SPC > SBC - 10 AND SPC < SBC + 10 THEN 1085
 1075 IF SPC > 235 THEN CALL DELSPRITE ( # 1 )  :: RETURN 
 1080 NEXT K  :: GOTO 1115
 1085 CALL SPRITE ( # 3 , 100 , 2 , SPR + 4 , SPC + 4 , 40 , 0 )  :: CALL SOUND ( - 4000 , - 3 , 0 ) 
 1090 FOR J = 1 TO JLOOP  :: CALL COINC ( # 2 , # 3 , 6 , HIT )  :: IF HIT < > - 1 THEN 1110ELSE CALL DELSPRITE ( # 1 , # 3 ) 
 1095 CALL SOUND ( - 1 , 2000 , 30 )  :: FOR C = 1 TO 25  :: CALL PATTERN ( # 2 , 104 , # 2 , 105 , # 2 , 106 )  :: NEXT C  :: CALL DELSPRITE ( # 2 ) 
 1100 DISPLAY AT ( 12 , 5 ) SIZE ( 17 )  : "DU HAST VERLOREN!"  :: GOSUB 995 :: FOR C = 1 TO 500  :: NEXT C 
 1105 GOSUB 1390 ! NOCH EIN                    SPIEL
 1110 NEXT J 
 1115 CALL DELSPRITE ( # 3 , # 1 )  :: CALL SOUND ( - 1 , 2000 , 30 ) 
 1120 RETURN 
 1125  !  SPIELANLEITUNG
 1130 CALL CLEAR 
 1135 CALL SCREEN ( 2 )  :: FOR I = 1 TO 9  :: CALL COLOR ( I , 16 , 2 )  :: NEXT I 
 1140 DISPLAY AT ( 12 , 1 )  : "BRAUCHST DU SPIELANLEITUNG?" 
 1145 DISPLAY AT ( 14 , 10 )  : "J ODER N" 
 1150 DISPLAY AT ( 24 , 7 )  : "ENTER EINGEBEN!" 
 1155 ACCEPT AT ( 18 , 14 ) BEEP VALIDATE ( "JN" ) SIZE ( 1 )  : INSTR$ 
 1160 IF INSTR$ = "N" THEN RETURN 
 1165 CALL CLEAR 
 1170 PRINT "HELIKOPTER ANGRIFF          ------------------"  :  :  : 
 1175 PRINT "DAS SPIEL KANN MIT DEN JOY-"  :  : "STICKS ODER DER TASTATUR GE-"  :  : 
 1180 PRINT "SPIELT WERDEN! BEI TASTATUR-"  :  : "BENUETZUNG SIND DIE TASTEN "  :  : 
 1185 PRINT "S UND D FUER SCHNELLE E UND"  :  : "X FUER LANGSAME BEWEGUNG. "  :  : 
 1190 PRINT "MIT Y WIRD GESCHOSSEN ABER"  :  : "NUR NACH EINER MELDUNG VON "  :  : 
 1195 PRINT "EINEM HELIKOPTER ANGRIFF..."  :  :  :: GOSUB 1285
 1200 PRINT "UND NUN ZUM SPIELVERLAUF !"  :  : "DU HAST DEN AUFTRAG EINE "  :  : 
 1205 PRINT "HELIKOPTER INVASION ABZU-"  :  : "WEHREN. JE NACH WAHL DER "  :  : 
 1210 PRINT "SPIELSTAERKE WAECHST DIE"  :  : "DISTANZ ODER MUNITIONS VOR-"  :  : 
 1215 PRINT "RAT. EIN RADAR UEBERWACHT "  :  : "DEN LUFTRAUM UND MELDET DIE"  :  : 
 1220 PRINT "HELIKOPTERANGRIFFE ABER AUF-"  :  : "GEPASST ES KOMMEN AUCH FLUG-"  :  : 
 1225 PRINT "ZEUGE, DIE DIE STELLUNG AN-"  :  : "GREIFFEN UND ZERSTOEREN."  :  :  :: GOSUB 1285
 1230 PRINT "DIESE KOENNEN ABER VOM RADAR"  :  : "NICHT GEMELDET WERDEN,DES-"  :  : 
 1235 PRINT "HALB SOLTEST DU IMMER IN"  :  : "BEWEGUNG SEIN. WENN DU EIN "  :  : 
 1240 PRINT "HELIKOPTER GETROFFEN HAST,"  :  : "SPRINGT DER PILOT MIT DEM"  :  : 
 1245 PRINT "FALLSCHIRM AB. DA DIESER DIE"  :  : "STELLUNG ANGREIFFEN WUERDE"  :  : 
 1250 PRINT "MUSST DU IHN AUCH TREFFEN "  :  :  :  :  :  :  :: GOSUB 1285 :: PRINT "NACH JEDER ERFOLG-"  :  : 
 1255 PRINT "REICHEN ABWEHR ERSCHEINT "  :  : "EINE TREFFER-STATISTIK AUF"  :  : 
 1260 PRINT "DEM BILDSCHIRM. "  :  :  :  : "   !!! VIEL GLUECK !!!"  :  :  :  :  :  :  :  :  :  :  :: GOSUB 1285
 1265 RETURN 
 1280 CALL CLEAR 
 1285 DISPLAY AT ( 24 , 1 )  : "WEITER MIT JEDER TASTE..." 
 1290 CALL KEY ( 0 , K , S )  :: IF S = 0 THEN 1290ELSE RETURN 
 1295 RETURN 
 1305 MISS_COUNT = MISS_COUNT + 1 
 1310 CALL VCHAR ( 24 , 27 + MISS_COUNT , 98 ) 
 1315 IF MISS_COUNT = SKLVL + 1 THEN GOSUB 1330 :: DISPLAY AT ( 12 , 5 ) SIZE ( 17 )  : "DU HAST VERLOREN!" ELSE GOTO 1325
 1320 FOR I = 1 TO 500  :: NEXT I  :: GOSUB 1390
 1325 RETURN 
 1335 CALL MOTION ( # 2 , 0 , 0 )  :: CALL SPRITE ( # 1 , 103 , 15 , 50 , 1 , 0 , 20 ) 
 1340 CALL POSITION ( # 2 , BR , BC ) 
 1345 FOR K = 1 TO 500  :: CALL POSITION ( # 1 , PR , PC )  :: IF PC > BC - 5 AND PC < BC + 5 THEN 1355
 1350 NEXT K 
 1355 CALL MOTION ( # 1 , 0 , 0 )  :: CALL SPRITE ( # 3 , 100 , 2 , PR + 4 , PC , 35 , 0 )  :: CALL SOUND ( 4000 , - 3 , 0 ) 
 1360 FOR J = 1 TO 18  :: CALL COINC ( # 2 , # 3 , 6 , HIT )  :: IF HIT < > - 1 THEN 1380ELSE CALL DELSPRITE ( # 2 , # 3 ) 
 1365 CALL SOUND ( - 1 , 40000 , 30 )  :: CALL MOTION ( # 1 , 0 , 20 )  :: FOR C = 1 TO 290  :: CALL POSITION ( # 1 , 0 , 20 )  :: FOR C = 1 TO 290  :: IF PC > 250 THEN 1375
 1370 NEXT C 
 1375 CALL DELSPRITE ( # 1 )  :: RETURN 
 1380 NEXT J 
 1385 RETURN 
 1395 CALL CLEAR  :: CALL CHARSET  :: CALL DELSPRITE ( ALL ) 
 1400 DISPLAY AT ( 24 , 7 )  : "ENTER EINGEBEN!" 
 1405 DISPLAY AT ( 12 , 1 )  : " NOCH EIN SPIEL (J/N)?"  :: ACCEPT AT ( 12 , 24 ) VALIDATE ( "JN" ) BEEP SIZE ( 1 )  : A$ 
 1410 IF A$ = "N" THEN END 
 1415 CALL CLEAR  :: DISPLAY AT ( 12 , 2 )  : "EINEN MOMENT DAS SPIEL"  : " "  : "WIRD NEU AUFGEBAUT.."  :: RUN 510
 1420 RETURN 
 1425  ! FEHLER ROUTINE
 1430 ON ERROR 1425
 1435 RETURN NEXT 
 1440  !  PGM-STEUERUNG
 1445 HELI_COUNT , SHOT_COUNT , MISS_COUNT = 0 
 1450 GOSUB 1125 :: CALL CLEAR  :: CALL CHARSET  :: CALL SCREEN ( 8 ) 
 1455 GOSUB 530 !  CHARAKTER- UND FARBDEFINITION
 1460 GOSUB 910 !  ZEITTEST   FUER V100 ODER V110
 1465 GOSUB 810 ! LEICHT- ODER SCHWERWAHL
 1470 GOSUB 855 ! SPIELSTAERKE
 1475 GOSUB 930 ! WIEVIELE?
 1480 GOSUB 630 ! BILDSCHIRM- AUFBAU
 1485 GOSUB 995 :: PSHOTS = 0  ! STATISTIK SUBRTN
 1490 GOSUB 735 ! HELIZUFALL
 1495 IF TIME = 1 THEN GOSUB 1050 :: GOTO 1490 ! FLUGZEUG ODER HELI
 1500 CALL BASE_MOVE ( TARGET$ ) 
 1505 CALL SHOT_CHECK ( SHOT_FLAG$ , TARGET$ ) 
 1510 IF SHOT_COUNT < SHOT_LIMIT THEN 1520
 1515 GOSUB 1330 :: DISPLAY AT ( 12 , 5 ) SIZE ( 17 )  : "DU HAST VERLOREN!"  :: FOR I = 1 TO 500  :: NEXT I  :: GOSUB 995 :: GOSUB 1390
 1520 IF SHOT_FLAG$ = "ON" THEN CALL SHOT ( SHOT_FLAG$ , TARGET$ , NW_HELI$ , SHOT_COUNT , ILOOP )  :: IF TARGET$ = "PARA" THEN PSHOTS = PSHOTS + 1 
 1525 IF PSHOTS = SKLVL + 2 THEN CALL DELSPRITE ( # 1 )  :: TARGET$ = "HELI"  :: NW_HELI$ = "YES"  :: GOSUB 1300
 1530 IF NW_HELI$ = "YES" THEN 1485ELSE 1500
 1535 END 
 1536 NEXT C 
 1540 SUB BASE_MOVE ( TARGET$ ) 
 1550 IF TARGET$ = "HELI" THEN CALL PATTERN ( # 1 , 97 ) 
 1555 CALL KEY ( 0 , K , S )  :: IF S = 0 THEN 1590
 1560 IF K = 89 THEN SUBEXIT 
 1565 IF K = 83 THEN X = - 4  :: GOTO 1600
 1570 IF K = 68 THEN X = 4  :: GOTO 1600
 1575 IF K = 69 THEN X = .66  :: GOTO 1600
 1580 IF K = 88 THEN X = - .66  :: GOTO 1600
 1585 SUBEXIT 
 1590 CALL JOYST ( 2 , X , Y )  :: IF X = 0 AND Y = 0 THEN CALL MOTION ( # 2 , 0 , 0 )  :: SUBEXIT 
 1595 IF Y < > 0 THEN CALL MOTION ( # 2 , 0 , Y )  :: GOTO 1605
 1600 CALL MOTION ( # 2 , 0 , X * 6 ) 
 1605 SUBEND 
 1610 SUB SHOT_CHECK ( SF$ , TARGET$ ) 
 1620 IF TARGET$ = "HELI" THEN CALL PATTERN ( # 1 , 96 ) 
 1625 CALL KEY ( 2 , B , S ) 
 1630 IF S = 0 OR ( B < > 18 AND B < > 89 ) THEN SF$ = "OFF"  :: SUBEXIT 
 1635 SF$ = "ON" 
 1640 SUBEND 
 1645 SUB SHOT ( SF$ , TARGET$ , NW_HELI$ , SHOT_COUNT , ILOOP ) 
 1655 IF TARGET$ = "HELI" THEN CALL PATTERN ( # 1 , 97 ) 
 1660 CALL POSITION ( # 2 , SBR , SBC ) 
 1665 CALL SOUND ( 50 , - 5 , 0 ) 
 1670 CALL SPRITE ( # 3 , 100 , 2 , SBR - 4 , SBC , - 70 , 0 ) 
 1675 FOR I = 1 TO ILOOP  :: CALL COINC ( # 3 , # 1 , 8 , HIT )  :: IF HIT = - 1 THEN 1685
 1680 NEXT I  :: GOTO 1730
 1685 CALL DELSPRITE ( # 3 ) 
 1690 IF TARGET$ = "PARA" THEN 1710
 1695 CALL SOUND ( 100 , - 7 , 0 )  :: CALL PATTERN ( # 1 , 104 )  :: FOR J = 1 TO 30  :: NEXT J 
 1700 CALL PATTERN ( # 1 , 98 )  :: TARGET$ = "PARA"  :: CALL MOTION ( # 1 , 5 , INT ( RND * 20 ) + 1 - 10 )  :: NW_HELI$ = "NO" 
 1705 GOTO 1730
 1710 CALL SOUND ( 100 , - 7 , 0 )  :: CALL PATTERN ( # 1 , 101 )  :: CALL MOTION ( # 1 , 28 , 0 )  :: CALL SOUND ( - 3000 , - 1 , 0 ) 
 1715 FOR K = 1 TO 50  :: CALL PATTERN ( # 1 , 102 )  :: CALL POSITION ( # 1 , Y1 , X1 )  :: IF Y1 > 180 THEN 1725
 1720 CALL PATTERN ( # 1 , 101 )  :: NEXT K 
 1725 CALL SOUND ( - 1 , 5000 , 30 )  :: CALL DELSPRITE ( # 1 )  :: TARGET$ = "HELI"  :: NW_HELI$ = "YES"  :: GOTO 1730
 1730 CALL DELSPRITE ( # 3 )  :: SF$ = "OFF"  :: SHOT_COUNT = SHOT_COUNT + 1 
 1735 SUBEND 
