  100 CALL CLEAR  :: OPTION BASE 1  :: DIM R ( 32 , 2 )  :: CALL MAGNIFY ( 3 ) 
  110 CALL CHAR ( 35 , "3C4299A1A199423C" ) 
  120 DISPLAY AT ( 3 , 9 )  : "TONNENHOPPER"  :: DISPLAY AT ( 7 , 1 )  : "# 1984  -  ANDREAS EHLERDING"  :: DISPLAY AT ( 14 , 7 )  : "VERSION ?  (0-9)"  :: ACCEPT AT ( 16 , 14 ) VALIDATE ( DIGIT ) BEEP SIZE ( - 1 )  : P 
  130 FOR A = 1 TO P  :: B = RND  :: NEXT A  :: CALL SCREEN ( 2 )  :: CALL CLEAR 
  140  !  CHARCODES DER TONNEN
  150 CALL CHAR ( 96 , "0001071F3F7FFFFF1FFFFFFFFFFFFFFFF8FFFFFFFFFFFFFF0080E0F8FCFEFFFF" ) 
  160 CALL CHAR ( 100 , "B7B7B7BFBFFFFFFF3FFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFEDEDEDFDFDFFFFFF" ) 
  170 CALL CHAR ( 104 , "FFFF7F3F1F070100FFFFFFFFFFFF1FFFFFFFFFFFFFFFFF8FFFFFFEFCF8E08000" ) 
  180 CALL CHAR ( 108 , "FFFFFFFFFFEFEDEDFFFFFFFFFFFFFF3FFFFFFFFFFFFFFFFCFFFFFFFFFFF7B7B7" ) 
  190 CALL CHAR ( 112 , "EDED6D2D1D070100202020202020E01F04040404040407F8B7B7B6BCB8E08000" ) 
  200 CALL CHAR ( 116 , "EDEDEDEDEDEDEDED20202020202020200404040404040404B7B7B7B7B7B7B7B7" ) 
  210 CALL CHAR ( 120 , "EDEDEFFFFFFFFFFF3FFFFFFFFFFFFFFFFCFFFFFFFFFFFFFFB7B7F7FFFFFFFFFF" ) 
  220 REM  CHARCODES SPRITES
  230 CALL CHAR ( 128 , "20203FFFFFFFFFFFFFFFFFFFFFFFFFFF0404FCFFFFFFFFFFFFFFFFFFFFFFFFFF" ) 
  240 CALL CHAR ( 132 , "FFFFFF00000000000000000000000000FFFFFF00000000000000000000000000" ) 
  250 CALL CHAR ( 136 , "E03F202020202020202020202020202007FC0404040404040404040404040404" ) 
  260 CALL CHAR ( 140 , "E0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF07FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF" ) 
  270 CALL CHAR ( 40 , "2020202020202020000000000000000004040404040404040000000000000000" ) 
  280 CALL CHAR ( 44 , "FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000" ) 
  290 CALL CHAR ( 64 , "03070D0705061F3F67673F1F0301010FC0E0B0E0A060F8FCE6E6FCF8C08080F0" ) 
  300 CALL CHAR ( 68 , "03070D6766353F3F1F0F07030101010FC0E0B0E060A0F8FCFEE6E6E0C4683000" ) 
  310 CALL CHAR ( 72 , "03070D0706051F3F7F67670723160C00C0E0B0E666ACFCFCF8F0E0C0808080F0" ) 
  320 CALL CHAR ( 76 , "03070D6766353F3F1F0F07030101010FC0E0B0E666ACFCFCF8F0E0C0808080F0" ) 
  330 CALL CHAR ( 80 , "000000000001031F2FFF1F030000000000183870F0E0C0F0FFFEF8C000000000" ) 
  340 CALL CHAR ( 84 , "0000000000031F2FFF1F03000000000000000030F0E0F0FFFEF8C00000000000" ) 
  350 CALL CHAR ( 88 , "0000000000031F2FFF1F0301000000000000000000E0F0FFFEF8C0E000000000" ) 
  360 CALL CHAR ( 92 , "00000000031F2FFF1F0301000000000000000000C0F0FFFEF8E0F0F878381800" ) 
  370 CALL CHAR ( 60 , "A078FC3E3E1F0F1F1E3E7C78583010100A1F3E7FF8E0E0F0781C0C0404000000" ) 
  380 IF LEN ( A$ ) THEN 550
  390  ! BESTIMMEN DER VERBIN-   DUNGEN ZWISCHEN DEN TONNEN
  400 FOR X = 1 TO 32  :: IF R ( X , 1 ) THEN 420
  410 R ( X , 1 ) = INT ( 32 * RND + 1 )  :: IF R ( R ( X , 1 ) , 1 ) THEN 410ELSE R ( R ( X , 1 ) , 1 ) = X 
  420 NEXT X  :: X = 14 
  430 REM  AUFBAU
  440 FOR H = 4 TO 30 STEP 3  :: CALL VCHAR ( 10 , H , 117 , 13 )  :: CALL VCHAR ( 10 , H + 1 , 118 , 13 )  :: NEXT H 
  450 FOR H = 4 TO 22 STEP 6  :: DISPLAY AT ( 8 , H )  : "`abc"  ;  :: NEXT H  :: FOR V = 12 TO 20 STEP 4  :: FOR H = 4 TO 22 STEP 6  :: DISPLAY AT ( V , H )  : "defg"  ;  :: NEXT H  :: NEXT V 
  460 FOR H = 1 TO 28 STEP 6  :: FOR V = 10 TO 18 STEP 4  :: DISPLAY AT ( V , H )  : "defg"  ;  :: NEXT V  :: NEXT H  :: FOR H = 4 TO 22 STEP 6  :: DISPLAY AT ( 24 , H )  : "pqrs"  ;  :: NEXT H 
  470 FOR H = 4 TO 22 STEP 6  :: FOR V = 9 TO 21 STEP 4  :: DISPLAY AT ( V , H )  : "lmno"  ;  :: NEXT V  :: NEXT H 
  480 FOR H = 1 TO 28 STEP 6  :: FOR V = 11 TO 19 STEP 4  :: DISPLAY AT ( V , H )  : "lmno"  ;  :: NEXT V  :: NEXT H 
  490 FOR V = 12 TO 20 STEP 4  :: CALL VCHAR ( V , 3 , 116 , 2 )  :: CALL VCHAR ( V , 30 , 119 , 2 )  :: NEXT V  :: CALL VCHAR ( 10 , 3 , 96 )  :: CALL VCHAR ( 10 , 30 , 99 ) 
  500 CALL HCHAR ( 22 , 3 , 116 )  :: CALL HCHAR ( 22 , 30 , 119 ) 
  510 DISPLAY AT ( 23 , 1 )  : "pqr"  ;  :: DISPLAY AT ( 23 , 26 )  : "qrs"  ;  :: FOR V = 14 TO 18 STEP 4  :: DISPLAY AT ( V , 1 )  : "xy"  ;  :: DISPLAY AT ( V , 27 )  : "z{"  ;  :: NEXT V 
  520 FOR H = 4 TO 22 STEP 6  :: DISPLAY AT ( 23 , H )  : "tuvw"  ;  :: DISPLAY AT ( 22 , H )  : "tuvw"  ;  :: NEXT H  :: FOR H = 8 TO 20 STEP 6  :: DISPLAY AT ( 23 , H )  : "qr"  ;  :: NEXT H 
  530 CALL SCREEN ( 5 )  :: GOTO 560
  540 REM  SPIELVORBEREITUNG
  550 FOR X = 1 TO 32  :: R ( X , 2 ) = 0  :: NEXT X  :: PU , AZ = 0  :: X = 14 
  560 CALL SPRITE ( # 1 , 80 , 16 , 100 , 256 , 2 , - 12 ) 
  570 REM  HOPPERROUTINE
  580 IF R ( X , 2 ) THEN CALL SOUND ( - 50 , 110 , 2 )  :: PU = PU - 50  :: GOTO 590ELSE CALL SOUND ( - 50 , 330 , 2 )  :: R ( X , 2 ) = R ( X , 2 ) + 1  :: AZ = AZ + 2  :: PU = PU + 200  :: X = R ( X , 1 )  :: IF X = 32 THEN 830
  590 IF PU < 0 THEN 980ELSE R ( X , 2 ) = R ( X , 2 ) + 1  :: DISPLAY AT ( 2 , 11 ) SIZE ( 8 )  : USING "##  ####"  : AZ , PU 
  600 V1 = INT ( ( X - .5 ) / 4.5 ) + 1  :: A = 48 * ( ( V1 / 2 ) - INT ( V1 / 2 ) )  :: V = V1 * 16 + 55  :: H = ( X - INT ( ( V1 - 1 ) * 4.5 ) - 1 ) * 48 + A + 25 
  610 CALL POSITION ( # 5 , OV , OH , # 1 , QV , QH )  :: DV = OV - QV - 32  :: DH = ABS ( OH - QH )  :: M = MAX ( ABS ( DV ) , DH )  :: IF M = 0 THEN 630
  620 CALL MOTION ( # 1 , DV / M * 12 , MIN ( DH / M * - 12 , - 6 ) ) 
  630 IF V < 136 THEN CALL SPRITE ( # 3 , 128 , 2 , V + 16 , H , # 4 , 132 , 5 , V + 16 , H ) ELSE CALL SPRITE ( # 3 , 40 , 2 , V + 16 , H , # 4 , 44 , 5 , V + 16 , H ) 
  640 VV = - 6  :: VH = 0  :: CALL SPRITE ( # 5 , 136 , 2 , V , H , # 6 , 140 , 5 , V , H , # 7 , 64 , 16 , V , H , VV , VH ) 
  650 K = 0  :: FOR A = 1 TO 3  :: FOR B = 1 TO 4  :: FOR C = 1 TO 2  :: CALL KEY ( 2 , K1 , S )  :: IF S THEN K = K1  :: CALL SOUND ( - 5 , 505 , 3 ) 
  660 NEXT C  :: CALL COINC ( # 7 , # 1 , 12 , CO )  :: IF CO THEN GOSUB 890
  670 CALL PATTERN ( # 1 , 76 + B * 4 )  :: NEXT B  :: NEXT A 
  680 RH = SGN ( ( K / 2 - INT ( K / 2 ) ) - .2 )  :: RV = SGN ( 3.5 - K )  :: IF K = 0 THEN RV , RH = 0 
  690 V = V + RV * 16  :: H = H + RH * 24  :: IF H > 232 OR H < 16 OR V < 64 OR V > 168 THEN V = V - RV * 16  :: H = H - RH * 24  :: RH , RV = 0 
  700 IF V < 136 THEN CALL SPRITE ( # 3 , 128 , 2 , V + 16 , H , # 4 , 132 , 5 , V + 16 , H ) ELSE CALL SPRITE ( # 3 , 40 , 2 , V + 16 , H , # 4 , 44 , 5 , V + 16 , H ) 
  710 CALL SPRITE ( # 5 , 136 , 2 , V , H , # 6 , 140 , 5 , V , H ) 
  720 CALL POSITION ( # 7 , PV , PH )  :: IF ABS ( PH - H ) < 2 THEN 750ELSE VH = RH * ( ( 12 - ABS ( 12 - ABS ( PH - H ) ) ) / 3 + 1 )  :: VV = ( 12 - ABS ( PH - H ) ) / 2  :: CALL MOTION ( # 7 , VV , VH ) 
  730 CALL PATTERN ( # 7 , 68 + INT ( RND * 3 ) * 4 )  :: CALL COINC ( # 1 , # 7 , 12 , CO )  :: IF CO THEN GOSUB 890
  740 CALL SOUND ( - 10 , ABS ( V - PV ) + 165 , 5 )  :: GOTO 720
  750 VV = 12  :: VH = 0  :: CALL SPRITE ( # 7 , 68 , 16 , PV , H , VV , VH ) 
  760 CALL POSITION ( # 7 , PV , PH )  :: IF PV > V - 8 AND PV < 176 THEN CALL DELSPRITE ( # 7 , # 6 , # 5 , # 4 , # 3 )  :: GOTO 780ELSE CALL COINC ( # 1 , # 7 , 12 , CO )  :: IF CO THEN GOSUB 890
  770 CALL PATTERN ( # 7 , 68 + INT ( RND * 3 ) * 4 )  :: CALL SOUND ( - 10 , ABS ( V - PV ) + 165 , 5 )  :: GOTO 760
  780 CALL SOUND ( - 50 , 165 , 3 ) 
  790 IF RV = - 1 THEN X = X - 4 + SGN ( RH - 1 ) 
  800 IF RV = 1 THEN X = X + 4 + SGN ( RH + 1 ) 
  810 GOTO 580
  820 REM  FUTSCH-ZONE
  830 CALL DELSPRITE ( ALL )  :: CALL CHARSET  :: IF AZ > 30 THEN 870ELSE M = 2 
  840 DISPLAY AT ( 2 , 9 )  : "MEHR GEDULD !"  :: DISPLAY AT ( 4 , 3 )  : "DAS SPIEL WAR NOCH"  :: DISPLAY AT ( 6 , 1 )  : "GAR NICHT ZU ENDE !? SCHADE." 
  850 FOR A = 1 TO 1000  :: NEXT A  :: CALL HCHAR ( 2 , 1 , 32 , 160 )  :: DISPLAY AT ( 2 , 3 )  : "DU HATTEST IMMERHIN SCHON"  :: DISPLAY AT ( 4 , 8 )  : STR$ ( PU ) & " PUNKTE"  ! !!"
  860 DISPLAY AT ( 6 , 2 )  : "PROBIERS DOCH NOCH MAL ..."  :: GOTO 1030
  870 DISPLAY AT ( 4 , 8 )  : "FABELHAFT !!!"  :: FOR A = 1 TO 1000  :: NEXT A  :: DISPLAY AT ( 6 , 1 )  : "FREUST DICH BESTIMMT. TOLL!"  :: M = 3  :: GOTO 1030
  880 REM  COINCIDENCE
  890 D = 0  :: PU = PU - 300  :: CALL SOUND ( - 50 , - 6 , 1 )  :: CALL MOTION ( # 1 , 0 , 0 , # 7 , 0 , 0 )  :: CALL PATTERN ( # 1 , 60 )  :: CALL SOUND ( - 50 , - 5 , 2 ) 
  900 CALL POSITION ( # 1 , QV , QH , # 5 , OV , OH )  :: DV = ( OV - QV - 16 ) / 3  :: DH = ( OH - QH ) / 3  :: CALL SOUND ( - 50 , - 5 , 3 )  :: IF INT ( ABS ( DH ) ) = 0 THEN DH = SGN ( DH ) 
  910 CALL MOTION ( # 1 , DV , DH ) 
  920 CALL POSITION ( # 1 , QV , QH )  :: IF ABS ( QH - OH ) < ABS ( DH ) / 7 + 1 THEN 930ELSE CALL SOUND ( - 100 , ( 31 - D ) * 110 , D )  :: D = D + 1  :: GOTO 920
  930 IF DV < 6 THEN DV = 6 
  940 CALL DELSPRITE ( # 1 )  :: CALL SPRITE ( # 8 , 60 , 16 , QV , OH , DV , 0 ) 
  950 CALL COINC ( # 5 , # 8 , ABS ( DV ) / 7 + 1 , CO )  :: IF CO THEN 960ELSE CALL SOUND ( - 100 , ( 31 - D ) * 110 , D )  :: D = D + 1  :: GOTO 950
  960 CALL DELSPRITE ( # 8 )  :: CALL SOUND ( - 100 , 115 , 1 )  :: CALL SPRITE ( # 1 , 80 , 16 , 100 , 256 , 0 , - 12 )  :: CALL SOUND ( - 100 , 110 , 2 )  :: CALL MOTION ( # 7 , VV , VH )  :: RETURN 
  970 REM  PUNKTE UNTER "0"
  980 CALL DELSPRITE ( ALL )  :: CALL CHARSET  :: IF PU = - 50 THEN M = 0 ELSE M = 1 
  990 IF M = 0 THEN DISPLAY AT ( 2 , 5 )  : "SCHREIB DIR DOCH DAS"  :: DISPLAY AT ( 4 , 2 )  : "NAECHSTE MAL AUF, WO"  :: DISPLAY AT ( 6 , 8 )  : "DU SCHON WARST !!" 
 1000 IF M = 1 THEN DISPLAY AT ( 2 , 2 )  : "IST DAS SPIEL SO SCHWER ZU"  :: DISPLAY AT ( 4 , 1 )  : "VERSTEHEN ??? PARAGRAPH 1 :"  :: DISPLAY AT ( 6 , 1 )  : "WENN VOGEL-DANN SCHNELL WEG!" 
 1010 GOTO 1030
 1020 REM  SPIEL ?
 1030 FOR A = 1 TO 1000  :: NEXT A  :: CALL HCHAR ( 2 , 1 , 32 , 160 )  :: DISPLAY AT ( 2 , 10 )  : "NOCH MAL ?"  :: ACCEPT AT ( 4 , 14 ) VALIDATE ( UALPHA ) BEEP SIZE ( 2 )  : A$  :: CALL HCHAR ( 2 , 1 , 32 , 160 )  :: IF A$ = "JA" OR A$ = "J" OR A$ = "Y" THEN 230
 1040 CALL CLEAR 
 1050 END 
