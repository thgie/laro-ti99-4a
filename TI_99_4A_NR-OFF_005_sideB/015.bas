    5 CALL CLEAR  :: CALL SCREEN ( 2 ) 
    7 ON WARNING NEXT 
    9 RANDOMIZE 
   10 DIM D$ ( 10 ) 
   15 RESTORE 20 :: FOR A = 1 TO 10  :: READ C$ 
   20 DATA 0.40 , 0.60 , 0.80 , 1.20 , 1.60 , 1.80 , 2.40 , 3.00 , 4.00 , 5.00 , 
   25 D$ ( A ) = C$  :: NEXT A 
   30 CALL CHAR ( 136 , "C0C0C0C0C0C0C0C00303030303030303000000000000FFFF" ) 
   35 CALL CHAR ( 139 , "FFFF" , 140 , "FFFFC0C0C0C0C0C0030303030303FFFF" ) 
   40 CALL CHAR ( 142 , "C0C0C0C0C0C0FFFFFFFF030303030303" , 128 , "FFFFFFFFFFFF" ) 
   45 CALL CHAR ( 129 , "FCFCFCFCFCFCFCFC0000FFFFFFFFFFFF3F3F3F3F3F3F3F3F" ) 
   50 CALL CHAR ( 120 , "FFFFFFFFFFFFFFFFFEFCF8F0E0C080000103070F1F3F7FFF" ) 
   55 CALL CHAR ( 123 , "80C0E0F0F8FCFEFF7F3F1F0F07030100" , 112 , "FFFFFFFFFFFFFFFF" ) 
   60 CALL CHAR ( 113 , "000000000000FFFFC0C0C0C0C0C0C0C0FFFF" ) 
   65 CALL CHAR ( 104 , "FFFFFFFFFFFFFFFF" , 125 , "" ) 
   70 CALL CHAR ( 36 , "20313B3F3B352E3D3F3F3F1F0F070301048CDCFCFCFCFC5CAC74ACD8F0E0C080" ) 
   75 CALL CHAR ( 92 , "03070E1C3870E0C00000000000000000000000000000000003070E1C3870E0C0" ) 
   80 CALL CHAR ( 40 , "0101074141415577777F7F7F7F7F7F008080E0828282AAEEEEFEFEFEFEFEFE00" ) 
   85 CALL CHAR ( 96 , "00000000000000000000000000000000C0E070381C0E07030000000000000000" ) 
   90 CALL CHAR ( 100 , "00000000000000000000000000000000000000000000000003070E1C3870E0C0" ) 
   95 CALL CHAR ( 108 , "0000000000000000C0E070381C0E070300000000000000000000000000000000" ) 
  100 CALL CHAR ( 116 , "03070E1C3870E0C0000000000000000000000000000000000000000000000000" ) 
  105 CALL CHAR ( 132 , "0000000000000000C0E070381C0E0703C0E070381C0E07030000000000000000" ) 
  110 FOR A = 4 TO 20  :: CALL HCHAR ( A , 1 , 120 , 26 )  :: NEXT A 
  115 FOR A = 1 TO 24  :: CALL HCHAR ( A , 27 , 125 , 6 )  :: NEXT A 
  120 CALL HCHAR ( 3 , 1 , 113 , 26 )  :: CALL HCHAR ( 21 , 1 , 115 , 26 )  :: CALL VCHAR ( 1 , 27 , 136 , 24 ) 
  125 CALL HCHAR ( 1 , 1 , 115 , 26 )  :: CALL HCHAR ( 24 , 1 , 113 , 26 ) 
  130 CALL HCHAR ( 1 , 27 , 139 , 6 )  :: CALL HCHAR ( 24 , 27 , 138 , 6 )  :: CALL HCHAR ( 1 , 27 , 140 )  :: CALL HCHAR ( 24 , 27 , 142 ) 
  135 FOR A = 2 TO 22 STEP 2  :: CALL HCHAR ( A , 29 , 112 , 3 )  :: NEXT A 
  140 RESTORE 145 :: FOR A = 1 TO 6  :: READ B1 , B2 , B3 
  145 DATA 2 , 6 , 3 , 2 , 16 , 6 , 22 , 6 , 5 , 23 , 6 , 5 , 22 , 15 , 7 , 23 , 15 , 7 
  150 CALL HCHAR ( B1 , B2 , 125 , B3 )  :: NEXT A 
  155 RESTORE 160 :: FOR A = 1 TO 15  :: READ B1 , B2 
  160 DATA 6 , 6 , 7 , 6 , 8 , 6 , 6 , 18 , 7 , 18 , 8 , 18 , 11 , 12 , 12 , 12 , 13 , 12 , 16 , 6 , 17 , 6 , 18 , 6 , 16 , 18 , 17 , 18 , 18 , 18 , 
  165 CALL HCHAR ( B1 , B2 , 125 , 4 )  :: NEXT A 
  170 CALL HCHAR ( 1 , 6 , 139 , 3 )  :: CALL HCHAR ( 1 , 16 , 139 , 6 )  :: CALL HCHAR ( 21 , 6 , 139 , 5 )  :: CALL HCHAR ( 21 , 15 , 139 , 7 ) 
  175 CALL HCHAR ( 3 , 6 , 138 , 3 )  :: CALL HCHAR ( 3 , 16 , 138 , 6 )  :: CALL HCHAR ( 24 , 6 , 138 , 5 )  :: CALL HCHAR ( 24 , 15 , 138 , 7 ) 
  180 CALL HCHAR ( 1 , 5 , 140 )  :: CALL HCHAR ( 1 , 9 , 143 )  :: CALL HCHAR ( 3 , 5 , 142 )  :: CALL HCHAR ( 3 , 9 , 141 ) 
  185 CALL HCHAR ( 1 , 15 , 140 )  :: CALL HCHAR ( 1 , 22 , 143 )  :: CALL HCHAR ( 3 , 15 , 142 )  :: CALL HCHAR ( 3 , 22 , 141 ) 
  190 CALL HCHAR ( 21 , 5 , 140 )  :: CALL HCHAR ( 21 , 11 , 143 )  :: CALL HCHAR ( 24 , 5 , 142 )  :: CALL HCHAR ( 24 , 11 , 141 ) 
  195 CALL HCHAR ( 21 , 14 , 140 )  :: CALL HCHAR ( 21 , 22 , 143 )  :: CALL HCHAR ( 24 , 14 , 142 )  :: CALL HCHAR ( 24 , 22 , 141 ) 
  200 RESTORE 205 :: FOR A = 1 TO 5  :: READ B1 , B2 
  205 DATA 5 , 6 , 5 , 18 , 10 , 12 , 15 , 6 , 15 , 18 , 
  210 CALL HCHAR ( B1 , B2 , 130 , 4 )  :: CALL HCHAR ( B1 + 4 , B2 , 128 , 4 )  :: NEXT A 
  215 RESTORE 220 :: FOR A = 1 TO 5  :: READ B1 , B2 
  220 DATA 6 , 5 , 6 , 17 , 11 , 11 , 16 , 5 , 16 , 17 , 
  225 CALL VCHAR ( B1 , B2 , 131 , 3 )  :: CALL VCHAR ( B1 , B2 + 5 , 129 , 3 )  :: NEXT A 
  230 CALL HCHAR ( 2 , 5 , 136 )  :: CALL HCHAR ( 2 , 15 , 136 )  :: CALL VCHAR ( 22 , 5 , 136 , 2 )  :: CALL VCHAR ( 22 , 14 , 136 , 2 ) 
  235 CALL HCHAR ( 2 , 9 , 137 )  :: CALL HCHAR ( 2 , 22 , 137 )  :: CALL VCHAR ( 22 , 11 , 137 , 2 )  :: CALL VCHAR ( 22 , 22 , 137 , 2 ) 
  240 RESTORE 245 :: FOR A = 1 TO 5  :: READ B1 , B2 
  245 DATA 5 , 5 , 5 , 17 , 10 , 11 , 15 , 5 , 15 , 17 , 
  250 CALL HCHAR ( B1 , B2 , 121 )  :: CALL HCHAR ( B1 + 4 , B2 , 123 )  :: CALL HCHAR ( B1 , B2 + 5 , 124 )  :: CALL HCHAR ( B1 + 4 , B2 + 5 , 122 )  :: NEXT A 
  255 CALL COLOR ( 14 , 16 , 6 , 13 , 6 , 2 , 12 , 5 , 6 , 11 , 16 , 2 , 10 , 7 , 16 )  :: CALL MAGNIFY ( 3 ) 
  260 FOR A = 2 TO 9  :: CALL COLOR ( A , 2 , 6 )  :: NEXT A 
  265 CALL SPRITE ( # 1 , 100 , 2 , 25 , 25 , # 2 , 100 , 2 , 25 , 121 , # 3 , 100 , 2 , 105 , 25 ) 
  270 CALL SPRITE ( # 4 , 108 , 2 , 25 , 73 , # 5 , 108 , 2 , 25 , 169 , # 6 , 108 , 2 , 105 , 169 ) 
  275 CALL SPRITE ( # 7 , 96 , 2 , 65 , 25 , # 8 , 96 , 2 , 145 , 25 , # 9 , 96 , 2 , 145 , 121 ) 
  280 CALL SPRITE ( # 10 , 116 , 2 , 65 , 169 , # 11 , 116 , 2 , 145 , 73 , # 12 , 116 , 2 , 145 , 169 ) 
  285 CALL SPRITE ( # 13 , 92 , 2 , 65 , 73 , # 14 , 92 , 2 , 105 , 121 , # 15 , 132 , 2 , 65 , 121 , # 16 , 132 , 2 , 105 , 73 ) 
  290 S$ = "000"  :: G$ = "000.00" 
  295 DISPLAY AT ( 2 , 4 )  : S$  ;  :: DISPLAY AT ( 2 , 14 )  : G$  ; 
  300 DISPLAY AT ( 7 , 10 )  : "DREI"  ;  :: DISPLAY AT ( 12 , 1 )  : "KRONEN"  ;  :: DISPLAY AT ( 12 , 17 )  : "SPIEL"  ; 
  305 RESTORE 310 :: FOR A = 2 TO 22 STEP 2  :: READ B1 
  310 DATA 83 , 85 , 80 , 69 , 82 , 47 , 83 , 69 , 82 , 73 , 69 , 
  315 DISPLAY AT ( A , 26 )  : CHR$ ( B1 )  ;  :: NEXT A 
  320 FOR A = 1 TO 50  :: NEXT A 
  325 DISPLAY AT ( 22 , 13 )  : "BETRAG?"  ; 
  330 ACCEPT AT ( 23 , 14 ) VALIDATE ( DIGIT , "." ) SIZE ( - 4 )  : M1 
  335 IF M1 < .3 XOR M1 > 99.9 THEN 340ELSE 345
  340 CALL HCHAR ( 23 , 15 , 125 , 7 )  :: GOTO 330
  345 M = M + M1  :: GOSUB 1065
  350 CALL HCHAR ( 22 , 15 , 125 , 7 )  :: CALL HCHAR ( 23 , 15 , 125 , 7 ) 
  354 FOR A = 1 TO 100  :: NEXT A 
  355 REM  ** LINKER WALZEN **
  360 B4 = 0  :: M = M - .3  :: GOSUB 1065
  365 B4 = B4 + 1 
  370 U = INT ( RND * 7 + 3 ) 
  375 X ( 1 ) = U  :: H = 17  :: V = 4 
  380 IF U = 9 THEN CALL SPRITE ( # 20 , 40 , 2 , 125 , 49 ) ELSE GOSUB 570
  385 CALL WALZE ( U , U1 ) 
  390 X ( 4 ) = U1 
  395 IF U1 = 10 THEN CALL SPRITE ( # 21 , 36 , 12 , 45 , 49 ) ELSE DISPLAY AT ( 7 , 4 )  : D$ ( U1 )  ; 
  400 IF B4 = 2 THEN 430 :: DISPLAY AT ( 22 , 4 )  : "START"  ; 
  405 FOR A = 1 TO 50  :: CALL KEY ( 0 , K , S )  :: IF S < > 0 THEN 420
  410 NEXT A 
  415 GOTO 430
  420 CALL HCHAR ( 7 , 6 , 125 , 4 )  :: CALL HCHAR ( 17 , 6 , 125 , 4 )  :: CALL DELSPRITE ( # 20 , # 21 ) 
  425 CALL HCHAR ( 22 , 6 , 125 , 5 )  :: GOTO 365
  430 REM  ** RECHTER WALZEN **
  435 CALL HCHAR ( 22 , 6 , 125 , 5 ) 
  440 FOR A = 1 TO 120  :: NEXT A 
  450 U = INT ( RND * 7 + 3 ) 
  455 X ( 2 ) = U  :: H = 17  :: V = 16 
  460 IF U = 9 THEN CALL SPRITE ( # 23 , 40 , 2 , 125 , 145 ) ELSE GOSUB 570
  465 CALL WALZE ( U , U1 ) 
  470 X ( 5 ) = U1 
  475 IF U1 = 10 THEN CALL SPRITE ( # 24 , 36 , 12 , 45 , 145 ) ELSE DISPLAY AT ( 7 , 16 )  : D$ ( U1 )  ; 
  480 REM  ** MITTLERE WALZE **
  485 FOR A = 1 TO 120  :: NEXT A 
  490 DISPLAY AT ( 22 , 4 )  : "STOP"  ; 
  495 B5 = 0 
  505 B5 = INT ( RND * 10 + 1 ) 
  510 FOR A = 1 TO 50 
  515 B5 = B5 + 1 
  520 CALL KEY ( 0 , K , S ) 
  525 IF S < > 0 THEN 550
  530 IF B5 = 10 THEN B5 = 0 
  535 NEXT A 
  545 B5 = INT ( RND * 10 + 1 ) 
  550 IF B5 > 8 THEN 560
  555 X ( 3 ) = B5  :: DISPLAY AT ( 12 , 10 )  : D$ ( B5 )  ;  :: GOTO 575
  560 IF B5 = 9 THEN CALL SPRITE ( # 25 , 40 , 2 , 85 , 97 ) ELSE CALL SPRITE ( # 25 , 36 , 12 , 85 , 97 ) 
  565 CALL HCHAR ( 22 , 6 , 125 , 5 )  :: X ( 3 ) = B5  :: GOTO 575
  570 DISPLAY AT ( H , V )  : D$ ( U )  ;  :: RETURN 
  575 IF J > 0 THEN 950ELSE DISPLAY AT ( 2 , 4 )  : "000"  ; 
  580 REM  ** GEWINNABFRAGE **
  585 IF X ( 1 ) = 9 AND X ( 2 ) = 9 AND X ( 3 ) = 9 THEN 865
  590 IF X ( 4 ) = 10 AND X ( 5 ) = 10 AND X ( 3 ) = 10 THEN 805
  595 IF X ( 3 ) = 9 AND X ( 4 ) = 10 AND X ( 5 ) = 10 THEN 835
  600 IF ( ( X ( 1 ) = X ( 2 ) XOR X ( 1 ) = X ( 5 ) ) AND ( X ( 1 ) = X ( 3 ) XOR X ( 3 ) = 9 ) ) THEN 620ELSE IF ( ( X ( 4 ) = X ( 5 ) XOR X ( 4 ) = X ( 2 ) ) AND ( X ( 4 ) = X ( 3 ) XOR X ( 3 ) = 9 ) ) THEN 620
  605 IF X ( 3 ) = 9 THEN 925
  610 GOTO 1180
  615 REM  ** RISIKOLAUF **
  620 DISPLAY AT ( 22 , 13 )  : "RISIKO"  ; 
  625 FOR A = 1 TO 50 
  630 CALL SOUND ( - 100 , 880 , 6 ) 
  635 CALL HCHAR ( 23 , 15 , 112 , 6 ) 
  640 CALL KEY ( 0 , K , S )  :: IF S = 0 THEN 645ELSE 710
  645 CALL HCHAR ( 23 , 15 , 104 , 6 ) 
  650 CALL KEY ( 0 , K , S )  :: IF S < > 0 THEN 775
  655 NEXT A 
  660 IF ( X ( 1 ) = X ( 2 ) XOR X ( 1 ) = X ( 5 ) ) AND ( X ( 1 ) = X ( 3 ) XOR X ( 3 ) = 9 ) THEN 665ELSE 670
  665 L = 1  :: GOTO 675
  670 L = 4 
  675 GOSUB 1225
  680 ON X ( L ) GOSUB 1095, 1100, 1105, 1110, 1115, 1120, 1125, 1130
  685 GOSUB 1065
  690 GOSUB 1010
  695 L = 0  :: CALL HCHAR ( 22 , 15 , 125 , 7 )  :: CALL HCHAR ( 23 , 15 , 125 , 7 ) 
  700 GOTO 1140
  705 REM  ** RISIKO-GEWINN **
  710 CALL SOUND ( 1500 , 262 , 3 , 330 , 3 , 392 , 3 ) 
  715 CALL HCHAR ( 23 , 15 , 125 , 6 )  :: CALL HCHAR ( 22 , 15 , 125 , 7 ) 
  720 IF ( X ( 1 ) = X ( 2 ) XOR X ( 1 ) = X ( 5 ) ) AND ( X ( 1 ) = X ( 3 ) XOR X ( 3 ) = 9 ) THEN 730
  725 IF ( X ( 4 ) = X ( 5 ) XOR X ( 4 ) = X ( 2 ) ) AND ( X ( 4 ) = X ( 3 ) XOR X ( 3 ) = 9 ) THEN 735
  730 L = 1  :: GOTO 740
  735 L = 4 
  740 FOR A = 1 TO 8 
  745 IF X ( L ) = A THEN M = M + VAL ( D$ ( A ) ) 
  750 NEXT A 
  755 ON X ( L ) GOSUB 1095, 1100, 1105, 1110, 1115, 1120, 1125, 1130
  760 GOSUB 1065
  765 GOSUB 1010
  770 GOTO 1140
  775 REM  ** RISIKO-VERLUST **
  780 CALL SOUND ( - 300 , 500 , 3 ) 
  785 CALL HCHAR ( 23 , 15 , 125 , 6 ) 
  790 CALL HCHAR ( 22 , 15 , 125 , 7 ) 
  795 FOR A = 1 TO 100  :: NEXT A 
  800 GOTO 1140
  805  !  ** SONDERSPIELE BEI **      ** 3 WAPPEN         **
  810 GOSUB 1280
  815 J = J + 5  :: GOSUB 900
  820 CALL HCHAR ( 6 , 29 , 112 , 3 )  :: GOSUB 1010
  825 GOSUB 1065
  830 GOTO 1140
  835  !  ** SONDERSPIELE BEI **      ** 2 WAPPEN+1 KRONE **
  840 GOSUB 1280
  845 J = J + 10  :: GOSUB 895
  850 CALL HCHAR ( 4 , 29 , 112 , 3 )  :: GOSUB 1010
  855 GOSUB 1065
  860 GOTO 1140
  865  !  ** SONDERSPIELE BEI **      ** 3 KRONEN         **
  870 GOSUB 1280
  875 J = J + 20  :: GOSUB 895
  880 CALL HCHAR ( 2 , 29 , 112 , 3 )  :: GOSUB 1010
  885 GOSUB 1065
  890 GOTO 1140
  895  ! * SONDERSPIELSCHLEIFE *
  900 M = M + 3 
  905 IF J > = 100 THEN 915ELSE IF J > = 10 THEN 920
  910 DISPLAY AT ( 2 , 4 )  : "00"  ;  :: DISPLAY AT ( 2 , 6 )  : USING "#"  : J  ;  :: RETURN 
  915 DISPLAY AT ( 2 , 4 )  : USING "###"  : J  ;  :: RETURN 
  920 DISPLAY AT ( 2 , 4 )  : "0"  ;  :: DISPLAY AT ( 2 , 5 )  : USING "##"  : J  ;  :: RETURN 
  925  ! * MITTLERE WALZE MIT        * KRONE
  930 GOSUB 1225
  935 M = M + .3  :: GOSUB 1065
  940 GOTO 1140
  945  ! *GEWINN AUSSERHALB DER      *SERIE
  950 J = J - 1 
  955 IF X ( 1 ) = 9 AND X ( 2 ) = 9 AND X ( 3 ) = 9 THEN 865
  960 IF ( ( X ( 1 ) = X ( 2 ) XOR X ( 1 ) = X ( 5 ) ) AND ( X ( 1 ) = X ( 3 ) XOR X ( 3 ) = 9 ) ) XOR ( ( X ( 4 ) = X ( 5 ) XOR X ( 4 ) = X ( 2 ) ) AND ( X ( 4 ) = X ( 3 ) XOR X ( 3 ) = 9 ) ) THEN M = M + 3 
  965 IF X ( 4 ) = 10 AND X ( 5 ) = 10 AND X ( 3 ) = 10 THEN 805
  970 IF X ( 3 ) = 9 AND X ( 4 ) = 10 AND X ( 5 ) = 10 THEN 835
  975 IF X ( 3 ) = 9 XOR X ( 3 ) = 10 XOR X ( 3 ) = 1 THEN M = M + 3 ELSE 985
  980 GOSUB 1255
  985 GOSUB 905
  990 GOSUB 1065
  995 GOSUB 1010
 1000 GOTO 1140
 1005  !  ** ABFRAGE AUF **           ** SUPERSERIE  **
 1010 FOR A = 2 TO 22  :: CALL GCHAR ( A , 29 , A2 ) 
 1015 IF A2 = 112 THEN A3 = A3 + 1 
 1020 NEXT A 
 1025 IF A3 = 11 THEN 1035
 1030 A3 = 0  :: RETURN 
 1035 REM  ** SUPERSERIE **
 1040 J = J + 50  :: GOSUB 905
 1045 A3 = 0 
 1050 FOR A = 2 TO 22 STEP 2  :: CALL HCHAR ( A , 29 , 104 , 3 )  :: NEXT A 
 1055 GOTO 1140
 1060  !  AUSGABE DES GEWINNS
 1065 IF M > = 100 THEN 1085ELSE IF M > = 10 THEN 1080ELSE IF M > = 1 THEN 1075
 1070 DISPLAY AT ( 2 , 14 )  : "000"  ;  :: DISPLAY AT ( 2 , 17 )  : USING ".#"  : M  ;  :: RETURN 
 1075 DISPLAY AT ( 2 , 14 )  : "00"  ;  :: DISPLAY AT ( 2 , 16 )  : USING "#.#"  : M  ;  :: RETURN 
 1080 DISPLAY AT ( 2 , 14 )  : "0"  ;  :: DISPLAY AT ( 2 , 15 )  : USING "##.#"  : M  ;  :: RETURN 
 1085 DISPLAY AT ( 2 , 14 )  : USING "###.#"  : M  ;  :: RETURN 
 1090  !  * GEWINNBALKEN *
 1095 M = M + .4  :: CALL HCHAR ( 22 , 29 , 112 , 3 )  :: RETURN 
 1100 M = M + .6  :: CALL HCHAR ( 20 , 29 , 112 , 3 )  :: RETURN 
 1105 M = M + .8  :: CALL HCHAR ( 18 , 29 , 112 , 3 )  :: RETURN 
 1110 M = M + 1.2  :: CALL HCHAR ( 16 , 29 , 112 , 3 )  :: RETURN 
 1115 M = M + 1.6  :: CALL HCHAR ( 14 , 29 , 112 , 3 )  :: RETURN 
 1120 M = M + 1.8  :: CALL HCHAR ( 12 , 29 , 112 , 3 )  :: RETURN 
 1125 M = M + 2.4  :: CALL HCHAR ( 10 , 29 , 112 , 3 )  :: RETURN 
 1130 M = M + 3  :: CALL HCHAR ( 8 , 29 , 112 , 3 )  :: RETURN 
 1135  !  * LOESCHEN DES *            * ALTEN SPIELS *
 1140 CALL HCHAR ( 22 , 6 , 125 , 5 ) 
 1145 FOR A = 1 TO 100  :: NEXT A 
 1150 RESTORE 1155 :: FOR A = 1 TO 5  :: READ B1 , B2 
 1155 DATA 7 , 6 , 7 , 18 , 12 , 12 , 17 , 6 , 17 , 18 , 
 1160 CALL HCHAR ( B1 , B2 , 125 , 4 )  :: NEXT A 
 1165 FOR A = 20 TO 25  :: CALL DELSPRITE ( # A )  :: NEXT A 
 1170 IF M < .3 THEN 325ELSE IF M > 999.9 THEN 1175ELSE 360
 1175 END 
 1180 CALL SOUND ( 250 , 440 , 6 ) 
 1185 CALL SOUND ( 150 , 392 , 6 ) 
 1190 CALL SOUND ( 150 , 330 , 6 ) 
 1195 CALL SOUND ( 150 , 294 , 6 ) 
 1200 CALL SOUND ( 150 , 277 , 6 ) 
 1205 CALL SOUND ( 250 , 262 , 6 ) 
 1210 CALL SOUND ( 350 , 220 , 6 ) 
 1215 CALL SOUND ( 450 , 196 , 6 ) 
 1220 GOTO 1140
 1225 CALL SOUND ( - 330 , 880 , 5 ) 
 1230 CALL SOUND ( - 330 , 988 , 5 ) 
 1235 CALL SOUND ( - 330 , 784 , 5 ) 
 1240 CALL SOUND ( - 330 , 392 , 5 ) 
 1245 CALL SOUND ( - 990 , 578 , 5 ) 
 1250 RETURN 
 1255 CALL SOUND ( 300 , 415 , 5 ) 
 1260 CALL SOUND ( 300 , 311 , 5 ) 
 1265 CALL SOUND ( 300 , 523 , 5 ) 
 1270 CALL SOUND ( 300 , 415 , 5 ) 
 1275 RETURN 
 1280 CALL SOUND ( 200 , 440 , 5 ) 
 1285 CALL SOUND ( 200 , 550 , 5 ) 
 1290 CALL SOUND ( 200 , 660 , 5 ) 
 1295 CALL SOUND ( 400 , 880 , 5 ) 
 1300 RETURN 
 1305 SUB WALZE ( U , U1 ) 
 1310 F = U - 2 
 1315 ON F GOTO 1320, 1320, 1325, 1335, 1340, 1345, 1355
 1320 U1 = 1  :: GOTO 1365
 1325 U1 = INT ( RND * 3 + 1 ) 
 1330 IF U1 = 2 THEN 1325ELSE 1365
 1335 U1 = INT ( RND * 2 + 2 )  :: GOTO 1365
 1340 U1 = INT ( RND * 4 + 1 )  :: GOTO 1365
 1345 U1 = INT ( RND * 10 + 1 ) 
 1350 IF U1 = 3 XOR U1 = 6 XOR U1 = 10 THEN 1365ELSE 1345
 1355 U1 = INT ( RND * 3 + 8 ) 
 1360 IF U1 = 9 THEN 1355
 1365 SUBEND 
